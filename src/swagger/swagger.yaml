openapi: 3.0.0
info:
  title: Property Management API
  version: 1.0.0
  description: Reffindr Node
  contact:
    name: Jack
servers:
  - url: http://localhost:3000
    description: Local Server
tags:
  - name: Users
    description: Endpoints for user management
  - name: Properties
    description: Endpoints for property management
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserRegister:
      type: object
      required:
        - roleId
        - name
        - lastName
        - email
        - password
      properties:
        roleId:
          type: number
          description: The roleId of the User
        name:
          type: string
          description: The name of the User
        lastName:
          type: string
          description: The lastName of the User
        email:
          type: string
          description: The email of the User
        password:
          type: string
          description: The password of the User
      example:
        roleId: 1
        name: John
        lastName: Doe
        email: john.doe@example.com
        password: password
    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: The email of the User
        password:
          type: string
          description: The password of the User
      example:
        email: john.doe@example.com
        password: password
    CreateProperty:
      type: object
      required:
        - countryId
        - stateId
        - title
        - address
        - environments
        - bathrooms
        - bedrooms
        - seniority
        - water
        - gas
        - surveillance
        - electricity
        - internet
        - pool
        - garage
        - pets
        - grill
        - elevator
        - terrace
        - description
        - requirementPostRequestDto
      properties:
        countryId:
          type: integer
        stateId:
          type: integer
        title:
          type: string
        address:
          type: string
        environments:
          type: integer
        bathrooms:
          type: integer
        bedrooms:
          type: integer
        seniority:
          type: integer
        water:
          type: boolean
        gas:
          type: boolean
        surveillance:
          type: boolean
        electricity:
          type: boolean
        internet:
          type: boolean
        pool:
          type: boolean
        garage:
          type: boolean
        pets:
          type: boolean
        grill:
          type: boolean
        elevator:
          type: boolean
        terrace:
          type: boolean
        description:
          type: string
        requirementPostRequestDto:
          type: object
          required:
            - isWorking
            - hasWarranty
            - rangeSalary
          properties:
            isWorking:
              type: boolean
            hasWarranty:
              type: boolean
            rangeSalary:
              type: integer
    Property:
      type: object
      properties:
        id:
          type: string
        countryId:
          type: integer
        stateId:
          type: integer
        title:
          type: string
        address:
          type: string
        environments:
          type: integer
        bathrooms:
          type: integer
        bedrooms:
          type: integer
        seniority:
          type: integer
        water:
          type: boolean
        gas:
          type: boolean
        surveillance:
          type: boolean
        electricity:
          type: boolean
        internet:
          type: boolean
        pool:
          type: boolean
        garage:
          type: boolean
        pets:
          type: boolean
        grill:
          type: boolean
        elevator:
          type: boolean
        terrace:
          type: boolean
        description:
          type: string
        requirementPostRequestDto:
          type: object
          properties:
            isWorking:
              type: boolean
            hasWarranty:
              type: boolean
            rangeSalary:
              type: integer
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        200:
          description: The user was successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  email:
                    type: string
        409:
          description: Conflict, email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
  /auth/login:
    post:
      summary: Login a user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        200:
          description: The user was successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                  errors:
                    type: array
                    items:
                      type: string
                  hasErrors:
                    type: boolean
                  statusCode:
                    type: number
  /properties/createProperty:
    post:
      summary: Create a new property
      tags: [Properties]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProperty'
      responses:
        201:
          description: Property successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      message:
                        type: string
                  errors:
                    type: array
                    items:
                      type: string
                  hasErrors:
                    type: boolean
                  statusCode:
                    type: number
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                  hasErrors:
                    type: boolean
                  statusCode:
                    type: number
  /properties/getProperties:
    get:
      summary: Get properties
      tags: [Properties]
      responses:
        200:
          description: A list of properties
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Property'
        404:
          description: No properties found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                  hasErrors:
                    type: boolean
                  statusCode:
                    type: number
security:
  - bearerAuth: []
